{"version":3,"file":"static/js/145.f7ab6a35.chunk.js","mappings":"sMACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAA4I,0BCA5I,EAAyB,2BAAzB,EAA6D,2B,6BCoB7D,EAZ8C,SAACA,GAC3C,IAAMC,EAAO,YAAcD,EAAME,GAEjC,OACI,gBAAKC,UAAWC,EAAhB,UACI,UAACC,EAAA,EAAD,CAASC,GAAIL,EAAMM,gBAAiBH,EAApC,WACI,gBAAKI,IAAKC,EAAQC,IAAKV,EAAMW,KAAO,eACpC,0BAAOX,EAAMW,WAI5B,ECnBD,EAA0B,yBAA1B,EAAgE,4BAAhE,EAAuG,0BAAvG,EAA4I,0BAA5I,EAAmL,4BAAnL,EAAgO,gCAAhO,EAA8Q,6BC6B9Q,EAnB2C,SAACX,GACxC,IAAMY,EAAgB,UAAMR,EAAN,YAAkC,OAAfJ,EAAMW,KAAgBP,EAAaA,GACtES,GAAYb,EAAMW,KAAgBG,GAExC,OACI,iBAAKX,UAAWS,EAAhB,WACI,iBAAKT,UAAWC,EAAhB,WACI,gBAAKD,UAAWW,EAAQN,IAAKK,EAAWH,IAAKV,EAAMW,KAAO,aAC1D,cAAGR,UAAWC,EAAd,SAA6BJ,EAAMW,WAEvC,iBAAKR,UAAWC,EAAhB,WACI,cAAGD,UAAWC,EAAd,SAA0BJ,EAAMe,WAChC,iBAAMZ,UAAWC,EAAjB,SAAiCJ,EAAMgB,mBAItD,E,uCCrBKC,GAAcC,EAAAA,EAAAA,GAAiB,IAoBrC,GAAeC,EAAAA,EAAAA,GAAoC,CAACC,KAAM,2BAA1D,EAdM,SAACpB,GACH,OACI,kBAAMqB,SAAUrB,EAAMsB,aAAtB,WACI,0BACKC,EAAAA,EAAAA,IAA0C,qBAAsB,iBAC7D,CAACC,EAAAA,EAAUP,GAAcQ,EAAAA,OAEjC,0BACI,yCAIf,ICwBD,EA9BgB,SAACzB,GAEb,IAAI0B,EAAQ1B,EAAM2B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAiBT,GAAI6B,EAAE7B,IAAZ6B,EAAE7B,GAArC,IACrC8B,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAASnB,QAASmB,EAAEC,YAAaxB,KAAMuB,EAAEE,OAChCpB,YAAakB,EAAElB,aAD8BkB,EAAEhC,GAA5D,IAQ3C,OAAKF,EAAMqC,QAGP,iBAAKlC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKwB,KAEL,gBAAKzB,UAAWC,EAAhB,UACI,yBAAM4B,OAGV,SAAC,EAAD,CAAgBX,SAfJ,SAACiB,GACjBtC,EAAMuC,YAAYD,EAAOE,eAC5B,QAEyB,SAACC,EAAA,EAAD,CAAUnC,GAAI,UAe3C,E,iDC1CGoC,EAA6B,SAAChB,GAAD,MAAY,CACzCW,OAAQX,EAAMiB,KAAKN,OADU,E,oBCajC,GAAeO,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KARkB,SAACnB,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAG1B,IAGU,UAAsBmB,EAAAA,MDVD,SAACC,GAAe,IAEtCC,EAFqC,0IAGvC,WACI,OAAKC,KAAKjD,MAAMqC,QAET,SAACU,GAAD,UAAeE,KAAKjD,SAFI,SAACyC,EAAA,EAAD,CAAUnC,GAAG,UAG/C,KAPsC,GAEX4C,EAAAA,WAUhC,OAFqCL,EAAAA,EAAAA,IAAQH,EAARG,CAAoCG,EAI5E,GCLD,CAGEG,E","sources":["webpack://react-way-of-samurai/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://react-way-of-samurai/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://react-way-of-samurai/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ltSlx\",\"dialogsItems\":\"Dialogs_dialogsItems__rRLLn\",\"active\":\"Dialogs_active__TjMe7\",\"messages\":\"Dialogs_messages__oeKeK\",\"message\":\"Dialogs_message__RsvS2\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__NuBmd\",\"active\":\"DialogItem_active__B06f3\"};","import React from 'react';\r\nimport s from './DialogItem.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Avatar from \"./../../../assets/img/UserPhoto/user.webp\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport const DialogItem:React.FC<PropsType> = (props) => {\r\n    const path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} activeClassName={s.active}>\r\n                <img src={Avatar} alt={props.name + \"'s Avatar\"}/>\r\n                <span>{props.name}</span>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\nexport default DialogItem","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__0Au9o\",\"senderInfo\":\"Message_senderInfo__8QKK6\",\"incoming\":\"Message_incoming__WAbxZ\",\"outgoing\":\"Message_outgoing__7eab8\",\"senderName\":\"Message_senderName__op33K\",\"messageContent\":\"Message_messageContent__zO5C5\",\"messageTime\":\"Message_messageTime__-++4E\"};","import React from 'react';\r\nimport s from './Message.module.css';\r\nimport avatar from './../../../assets/img/UserPhoto/user.webp'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    name:string\r\n    messageTime:string\r\n}\r\n\r\n\r\nexport const Message:React.FC<PropsType> = (props) => {\r\n    const messageClassName = `${s.message} ${props.name === \"Me\" ? s.outgoing : s.incoming}`;\r\n    const avatarSrc = props.name === \"Me\" ? avatar : avatar;\r\n\r\n    return (\r\n        <div className={messageClassName}>\r\n            <div className={s.senderInfo}>\r\n                <img className={avatar} src={avatarSrc} alt={props.name + \" avatar\"}/>\r\n                <p className={s.senderName}>{props.name}</p>\r\n            </div>\r\n            <div className={s.messageContent}>\r\n                <p className={s.message}>{props.message}</p>\r\n                <span className={s.messageTime}>{props.messageTime}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {createField, Textarea} from \"../../Common/FormsControl/FormsControls\";\r\nimport {NewMessageFormValuesType} from \"../Dialogs\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\r\n    = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", 'newMessageBody',\r\n                    [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialog-add-message-form'})(AddMessageForm);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    isAuth: boolean;\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\nconst Dialogs = (props: PropsType) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.messageText} name={m.sender} key={m.id}\r\n                                                            messageTime={m.messageTime}/>);\r\n\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}","import React from 'react';\r\n\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {actions, sendNewMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"names":["props","path","id","className","s","NavLink","to","activeClassName","src","Avatar","alt","name","messageClassName","avatarSrc","avatar","message","messageTime","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","messageText","sender","isAuth","values","sendMessage","newMessageBody","Redirect","mapStateToPropsForRedirect","auth","compose","connect","actions","Component","RedirectComponent","this","React","Dialogs"],"sourceRoot":""}