{"version":3,"file":"static/js/34.6caa2469.chunk.js","mappings":"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","sources":["components/Common/FormsControl/FormsControls.tsx","webpack://react-way-of-samurai/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileData/ProfileDataForm.tsx","webpack://react-way-of-samurai/./src/components/Profile/ProfileData/ProfileData.module.css?a227","components/Profile/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://react-way-of-samurai/./src/components/Profile/Profile.module.css?b512","webpack://react-way-of-samurai/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://react-way-of-samurai/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Common/FormsControl/PostForm.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","webpack://react-way-of-samurai/./src/components/Common/FormsControl/FormsControls.module.css?1e90"],"sourcesContent":["import React from \"react\"\nimport styles from \"./FormsControls.module.css\"\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\nimport {Field, WrappedFieldProps} from \"redux-form\"\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\n\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\n// @ts-ignore\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n}\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\n                                                         name: FormKeysType,\n                                                         validators: Array<FieldValidatorType>,\n                                                         component: React.FC<WrappedFieldProps>,\n                                                         props = {}, text = \"\") {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n}\nexport type GetStringKeys<T> = Extract<keyof T, string>","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__QRxfo\",\"status\":\"ProfileInfo_status__9TBlh\",\"profile\":\"ProfileInfo_profile__IYIpe\",\"description\":\"ProfileInfo_description__OTf4m\",\"button\":\"ProfileInfo_button__GDwWw\"};","import React, {useState, useEffect, ChangeEvent} from 'react';\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {!editMode &&\n            <div>\n                <b>Status: </b> <span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\n                       value={status}/>\n            </div>\n            }\n        </div>\n    )\n}\n\n\nexport default ProfileStatusWithHooks;\n","import React from \"react\";\nimport s from '../ProfileInfo/ProfileInfo.module.css';\nimport {createField, GetStringKeys, Input, Textarea} from \"../../Common/FormsControl/FormsControls\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport style from \"../../Common/FormsControl/FormsControls.module.css\";\nimport {ProfileType} from \"../../../types/types\";\n\n\ntype PropsType = {\n    profile: ProfileType\n}\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\n    return <form onSubmit={handleSubmit}>\n        <div>\n            <button>save</button>\n        </div>\n        {error && <div className={style.formSummaryError}>\n            {error}\n        </div>\n        }\n        <div>\n            <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\n        </div>\n        <div>\n            <b>Looking for a job</b>: {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\n        </div>\n\n        <div>\n            <b>My professional skills</b>:\n            {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\n        </div>\n\n\n        <div>\n            <b>About me</b>:\n            {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\n        </div>\n        <div>\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n            return <div key={key} className={s.contact}>\n                <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\n            </div>\n        })}\n        </div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ProfileData_item__sxa-+\",\"fullName\":\"ProfileData_fullName__qkXki\",\"button\":\"ProfileData_button__o0E+w\",\"contacts\":\"ProfileData_contacts__6+-Cf\",\"contactsInput\":\"ProfileData_contactsInput__SVPKu\"};","import React from 'react';\nimport s from './ProfileData.module.css';\nimport {ProfileType} from \"../../../types/types\";\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\n\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n    return <div className={s.item}>\n        <div className={s.fullName}>\n            {profile.fullName}\n        </div>\n        <div>\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        {profile.lookingForAJob &&\n        <div>\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\n        </div>\n        }\n        <div>\n            <b>About me</b>: {profile.aboutMe}\n        </div>\n        <div className={s.contacts}><b>Contacts</b>:\n            <li><span>facebook:</span> {profile.contacts.facebook}</li>\n            <li><span>github:</span> {profile.contacts.github}</li>\n            <li><span>instagram:</span> {profile.contacts.instagram}</li>\n            <li><span>twitter:</span> {profile.contacts.twitter}</li>\n            <li><span>vk:</span> {profile.contacts.vk}</li>\n            <li><span>youtube:</span> {profile.contacts.youtube}</li>\n        </div>\n        <div> {isOwner &&\n            <button className={s.button} onClick={goToEditMode}>edit</button>}\n        </div>\n    </div>\n}\n\n","import React, {ChangeEvent, useState} from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../Common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/img/UserPhoto/user.webp\";\nimport ProfileDataForm from \"../ProfileData/ProfileDataForm\";\nimport {ProfileData} from \"../ProfileData/ProfileData\";\nimport {ProfileType} from \"../../../types/types\";\n\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        saveProfile(formData).then(\n            () => {\n                setEditMode(false);\n            }\n        );\n    }\n\n    return (<div className={s.descriptionBlock}>\n            <div className={s.profile}>\n                <img src={profile.photos.large || userPhoto}/>\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\n                <div className={s.status}>\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n                </div>\n\n            </div>\n\n\n            <div className={s.description}>\n\n                {editMode\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\n                    : <ProfileData goToEditMode={() => {\n                        setEditMode(true)\n                    }} profile={profile} isOwner={isOwner}/>}\n            </div>\n        </div>\n    )\n}\n\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__xIzAt\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__2ZpCO\",\"itemImg\":\"Post_itemImg__5FsBq\",\"itemText\":\"Post_itemText__6L7jO\",\"itemName\":\"Post_itemName__tbJIw\",\"itemLike\":\"Post_itemLike__ZFEYY\"};","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport authorImg from '../../../../assets/img/UserPhoto/user.webp'\nimport styles from './Post.module.css'\nimport {ProfilePropsType} from \"../../../../types/types\";\n\n\nexport type PostType = {\n    id?: number\n    profile?: ProfilePropsType\n    message: string\n    likesCount: number\n}\n\nexport const Post = (props: PostType) => {\n    const photo = props.profile?.photos?.small ? props.profile.photos.small : authorImg;\n\n    return (\n        <div className={styles.item}>\n            <div className={styles.itemImg}>\n                {photo && <img src={photo} alt=\"\" />}\n            </div>\n            <div className={styles.itemText}>\n                <div className={styles.itemName}>\n                    {props.profile?.fullName || 'Samurai'}\n                </div>\n                <div className={styles.itemMessage}>\n                    {props.message}\n                </div>\n            </div>\n            <div className={styles.itemLike}>\n                <FontAwesomeIcon icon={faHeart as IconProp} /> {props.likesCount}\n            </div>\n        </div>\n    )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__QQK2l\",\"addPost\":\"MyPosts_addPost__z-aI+\",\"addPost__title\":\"MyPosts_addPost__title__GDtm+\",\"postsBlock\":\"MyPosts_postsBlock__MGRfS\"};","\nimport { Field, Form, Formik, FormikValues } from 'formik'\nimport * as yup from 'yup';\nimport styles from './FormsControls.module.css';\n\ntype PostFormPropsType = {\n\tonSubmit: (post: string) => void\n}\n\nconst validationSchema = yup.object({\n\tpost: yup.string().typeError('Invalid login').required('Required')\n})\n\nexport const PostForm = (props: PostFormPropsType) => {\n\tconst onSubmitHandler = (post: { post: string }, { resetForm }: FormikValues) => {\n\t\tprops.onSubmit(post.post);\n\t\tresetForm({})\n\t}\n\n\treturn (\n\t\t<Formik initialValues={{ post: '' }} onSubmit={onSubmitHandler} validationSchema={validationSchema} validateOnBlur>\n\t\t\t{({ errors, touched, handleChange, handleBlur, isValid, dirty }) => (\n\t\t\t\t<Form>\n\t\t\t\t\t<div className={styles.addPost}>\n\t\t\t\t\t\t<div className={styles.addPost__title}>\n\t\t\t\t\t\t\tWrite a new post... {touched.post && errors.post && <span>{errors.post}</span>}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"textarea\">\n\t\t\t\t\t\t\t<Field className={'textarea'} component={'textarea'} name=\"post\" onBlur={handleBlur} onChange={handleChange} />\n\t\t\t\t\t\t\t<button disabled={!isValid && !dirty} type={'submit'} >Post</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</Form>\n\t\t\t)}\n\t\t</Formik>\n\t)\n}","\nimport {connect} from \"react-redux\";\n\nimport {DispatchPropsType, MapPropsType, MyPosts} from \"./MyPosts\";\nimport {AppStateType} from \"../../../redux/redux-store\";\n\nimport {actions} from \"../../../redux/profile-reducer\";\nimport {PostType} from \"./Post/Post\";\nimport {Dispatch} from \"redux\";\n\n\nexport type MyPostPropsType = mapStateToPropsType & DispatchPropsType;\n\nexport type mapStateToPropsType = {\n    posts: Array<PostType>\n    profile: any\n    status?: string\n}\n\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n        profile: state.profilePage.profile,\n    }\n}\n\n\ntype mapDispatchToPropsType = {\n    addPost: (post: string) => void,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        addPost: actions.addPostActionCreator,\n    }\n}\n\n\n// @ts-ignore\nexport const MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\n    addPost: actions.addPostActionCreator\n})(MyPosts);\n","import {Post} from \"./Post/Post\";\nimport s from './MyPosts.module.css'\nimport {PostForm} from \"../../Common/FormsControl/PostForm\";\nimport {PostType} from \"../../../types/types\";\nimport React from \"react\";\nimport {MyPostPropsType} from \"./MyPostsContainer\";\n\nexport type MapPropsType = {\n    posts: Array<PostType>\n}\nexport type DispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\n\n\nexport const MyPosts = (props: MyPostPropsType) => {\n    const postsElements = props.posts.reverse().map((p, key) =>\n        <Post key={key} profile={props.profile} message={p.message} likesCount={p.likesCount} />);\n\n    return (\n        <div className={s.postsBlock}>\n            <div className={s.addPost}> <PostForm  onSubmit={props.addPost}/></div>\n\n\n\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\nimport {ProfileType} from \"../../types/types\";\nimport s from \"./Profile.module.css\"\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst Profile: React.FC<PropsType> = (props) => {\n\n    return (\n        <div className={s.profile}>\n\n\n            <ProfileInfo savePhoto={props.savePhoto}\n                         isOwner={props.isOwner}\n                         profile={props.profile}\n                         status={props.status}\n                         saveProfile={props.saveProfile}\n                         updateStatus={props.updateStatus}/>\n\n            <MyPostsContainer profile={undefined} posts={[]} />\n        </div>\n    )\n}\n\n\nexport default Profile;","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {ProfileType} from \"../../types/types\";\nimport {AppStateType} from \"../../redux/redux-store\";\n\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\n\nclass ProfileContainer extends React.Component<PropsType> {\n    constructor(props: PropsType) {\n        super(props);\n    }\n\n    refreshProfile() {\n        let userId: number | null = +this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                // todo: may be replace push with Redirect??\n                this.props.history.push(\"/login\");\n            }\n        }\n\n        if (!userId) {\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\n        } else {\n            this.props.getUserProfile(userId)\n            this.props.getStatus(userId)\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    componentWillUnmount(): void {\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n    //console.log('mapStateToProps PROFILE')\n    return ({\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    })\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter\n)(ProfileContainer);\n\n\n\n;","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__Qqnnn\",\"error\":\"FormsControls_error__KUCU0\",\"formSummaryError\":\"FormsControls_formSummaryError__IyknP\",\"login\":\"FormsControls_login__Si2wy\",\"form\":\"FormsControls_form__QjY6U\",\"formTitle\":\"FormsControls_formTitle__DGzSR\",\"formDescription\":\"FormsControls_formDescription__Et9mJ\",\"formWrapper\":\"FormsControls_formWrapper__1o9Dk\",\"formLabelText\":\"FormsControls_formLabelText__xR1HN\",\"input\":\"FormsControls_input__ij5By\",\"formButton\":\"FormsControls_formButton__e-Pnu\",\"formError\":\"FormsControls_formError__ulgZE\"};"],"names":["FormControl","meta","touched","error","children","hasError","className","styles","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","handleSubmit","profile","onSubmit","style","type","Object","keys","contacts","map","key","s","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","facebook","github","instagram","twitter","vk","youtube","onClick","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","target","files","length","initialValues","formData","then","Post","photo","small","authorImg","alt","message","icon","faHeart","likesCount","validationSchema","yup","post","typeError","required","PostForm","resetForm","validateOnBlur","errors","handleChange","handleBlur","isValid","dirty","disabled","MyPostsContainer","connect","state","posts","profilePage","addPost","actions","postsElements","reverse","p","undefined","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","React","compose","auth","isAuth","withRouter"],"sourceRoot":""}