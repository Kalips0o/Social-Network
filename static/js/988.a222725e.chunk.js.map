{"version":3,"file":"static/js/988.a222725e.chunk.js","mappings":"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","sources":["webpack://react-way-of-samurai/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileData/ProfileDataForm.tsx","webpack://react-way-of-samurai/./src/components/Profile/ProfileData/ProfileData.module.css?a227","components/Profile/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://react-way-of-samurai/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://react-way-of-samurai/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Common/FormsControl/PostForm.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__bPSs9\",\"status\":\"ProfileInfo_status__p6B1M\",\"profile\":\"ProfileInfo_profile__wKUeB\",\"description\":\"ProfileInfo_description__-wYAe\",\"button\":\"ProfileInfo_button__3qexu\"};","import React, {useState, useEffect, ChangeEvent} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status: </b> <span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport s from '../ProfileInfo/ProfileInfo.module.css';\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../Common/FormsControl/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../Common/FormsControl/FormsControls.module.css\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>save</button>\r\n        </div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n\r\n\r\n        <div>\r\n            <b>About me</b>:\r\n            {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ProfileData_item__0WtCH\",\"fullName\":\"ProfileData_fullName__4obzs\",\"button\":\"ProfileData_button__1RQll\",\"contacts\":\"ProfileData_contacts__NHP+G\",\"contactsInput\":\"ProfileData_contactsInput__QuXJY\"};","import React from 'react';\r\nimport s from './ProfileData.module.css';\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div className={s.item}>\r\n        <div className={s.fullName}>\r\n            {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div className={s.contacts}><b>Contacts</b>:\r\n            <li><span>facebook:</span> {profile.contacts.facebook}</li>\r\n            <li><span>github:</span> {profile.contacts.github}</li>\r\n            <li><span>instagram:</span> {profile.contacts.instagram}</li>\r\n            <li><span>twitter:</span> {profile.contacts.twitter}</li>\r\n            <li><span>vk:</span> {profile.contacts.vk}</li>\r\n            <li><span>youtube:</span> {profile.contacts.youtube}</li>\r\n        </div>\r\n        <div> {isOwner &&\r\n            <button className={s.button} onClick={goToEditMode}>edit</button>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/img/UserPhoto/user.webp\";\r\nimport ProfileDataForm from \"../ProfileData/ProfileDataForm\";\r\nimport {ProfileData} from \"../ProfileData/ProfileData\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (<div className={s.descriptionBlock}>\r\n            <div className={s.profile}>\r\n                <img src={profile.photos.large || userPhoto}/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                <div className={s.status}>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className={s.description}>\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={profile} isOwner={isOwner}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__vzpjA\",\"itemImg\":\"Post_itemImg__MXy-U\",\"itemText\":\"Post_itemText__tGHRB\",\"itemName\":\"Post_itemName__AK5GU\",\"itemLike\":\"Post_itemLike__dt8Ch\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\nimport userPhoto from \"./../../../../assets/img/UserPhoto/user.webp\"\r\n\r\n\r\nexport type PostType = {\r\n    id?: number\r\n    profile?: any\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nfunction Post(props: PostType) {\r\n  const photo = props.profile?.photos?.small ? props.profile.photos.small : userPhoto;\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.itemImg}>\r\n                {photo && <img src={photo} alt=\"\"/>}\r\n            </div>\r\n            <div className={s.itemText}>\r\n                <div className={s.itemName}>\r\n                    {props.profile?.fullName || 'Samurai'}\r\n                </div>\r\n                <div className={s.itemMessage}>\r\n                    {props.message}\r\n                </div>\r\n            </div>\r\n            <div className={s.itemLike}>\r\n                <span> ♥ {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__tFdWj\",\"addPost\":\"MyPosts_addPost__8YEwK\",\"addPost__title\":\"MyPosts_addPost__title__jmedP\",\"postsBlock\":\"MyPosts_postsBlock__7xiVi\"};","\r\nimport { Field, Form, Formik, FormikValues } from 'formik'\r\n// @ts-ignore\r\nimport * as yup from 'yup';\r\nimport styles from './../../Profile/MyPosts/MyPosts.module.css'\r\n\r\ntype PostFormPropsType = {\r\n\tonSubmit: (post: string) => void\r\n}\r\n\r\nconst validationSchema = yup.object({\r\n\tpost: yup.string().typeError('Invalid login').required('Required')\r\n})\r\n\r\nexport const PostForm = (props: PostFormPropsType) => {\r\n\tconst onSubmitHandler = (post: { post: string }, { resetForm }: FormikValues) => {\r\n\t\tprops.onSubmit(post.post);\r\n\t\tresetForm({})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Formik initialValues={{ post: '' }} onSubmit={onSubmitHandler} validationSchema={validationSchema} validateOnBlur>\r\n\t\t\t{({ errors, touched, handleChange, handleBlur, isValid, dirty }) => (\r\n\t\t\t\t<Form>\r\n\t\t\t\t\t<div className={styles.addPost}>\r\n\t\t\t\t\t\t<div className={styles.addPost__title}>\r\n\t\t\t\t\t\t\tWrite a new post... {touched.post && errors.post && <span>{errors.post}</span>}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"textarea\">\r\n\t\t\t\t\t\t\t<Field className={'textarea'} component={'textarea'} name=\"post\" onBlur={handleBlur} onChange={handleChange} />\r\n\t\t\t\t\t\t\t<button disabled={!isValid && !dirty} type={'submit'} >Post</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Form>\r\n\t\t\t)}\r\n\t\t</Formik>\r\n\t)\r\n}","\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {DispatchPropsType, MapPropsType, MyPosts} from \"./MyPosts\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport {PostType} from \"./Post/Post\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type MyPostPropsType = mapStateToPropsType & DispatchPropsType;\r\n\r\nexport type mapStateToPropsType = {\r\n    posts: Array<PostType>\r\n    profile: any\r\n    status?: string\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        profile: state.profilePage.profile,\r\n    }\r\n}\r\n\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (post: string) => void,\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: actions.addPostActionCreator,\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n\r\n\r\n// export const MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n//     addPost: actions.addPostActionCreator\r\n// })(MyPosts);\r\n","import Post from \"./Post/Post\";\r\nimport s from './MyPosts.module.css'\r\nimport {PostForm} from \"../../Common/FormsControl/PostForm\";\r\nimport {PostType} from \"../../../types/types\";\r\nimport React from \"react\";\r\nimport {MyPostPropsType} from \"./MyPostsContainer\";\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\n\r\nexport const MyPosts = (props: MyPostPropsType) => {\r\n    const postsElements = props.posts.map((p, key) =>\r\n        <Post key={key} profile={props.profile} message={p.message} likesCount={p.likesCount} />);\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <PostForm onSubmit={props.addPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                // todo: may be replace push with Redirect??\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    //console.log('mapStateToProps PROFILE')\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n;"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","facebook","github","instagram","twitter","vk","youtube","onClick","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","target","files","length","initialValues","formData","then","photo","small","alt","message","likesCount","validationSchema","yup","post","typeError","required","PostForm","resetForm","validateOnBlur","errors","touched","handleChange","handleBlur","isValid","dirty","styles","component","name","disabled","MyPostsContainer","connect","state","posts","profilePage","dispatch","addPost","actions","postsElements","p","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","React","compose","auth","isAuth","withRouter"],"sourceRoot":""}